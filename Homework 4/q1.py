# -*- coding: utf-8 -*-
"""q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a0GOif-VhwokUxgKRMpv09-WGXZBULFG
"""

import random
import requests
import math
from random import randint

def phi(n):
  amount = 0
  for k in range(1, n+1):
    if math.gcd(n,k) == 1:
      amount += 1
  return amount

def egcd(a,b):
  x,y,u,v = 0,1,1,0
  while a!=0:
    q,r = b//a, b%a
    m,n = x-u*q, y-v*q
    b,a,x,y,u,v = a,r,u,v,m,n
  gcd = b
  return gcd, x,y 

def modinv(a, m):
    a = a % m
    if (a < -m):
        a = a+m
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m

API_URL = 'http://cryptlygos.pythonanywhere.com'

my_id = 25139   #Change this to your ID

def RSA_Oracle_Get():
  response = requests.get('{}/{}/{}'.format(API_URL, "RSA_Oracle", my_id)) 	
  c, N, e = 0,0,0 
  if response.ok:	
    res = response.json()
    print(res)
    return res['c'], res['N'], res['e']
  else:
    print(response.json())

def RSA_Oracle_Query(c_):
  response = requests.get('{}/{}/{}/{}'.format(API_URL, "RSA_Oracle_Query", my_id, c_)) 
  print(response.json())
  m_= ""
  if response.ok:	m_ = (response.json()['m_'])
  else: print(response)
  return m_

def RSA_Oracle_Checker(m):
  response = requests.put('{}/{}/{}/{}'.format(API_URL, "RSA_Oracle_Checker", my_id, m))
  print(response.json())

#get the parameters
c, N, e = RSA_Oracle_Get()

r = 13                 # random number
r_to_e = pow(r, e, N)  # rasing r with the power e (in modulo N)
c_  = (r_to_e * c) % N # creating modified ciphertext (c_)

m_ = RSA_Oracle_Query(c_) # getting corresponding plaintext of modified ciphertext from the server

inv_r = modinv(r, N)        # calculating inverse of r (in modulo N)
message = (m_ * inv_r) % N  # returning back to the original message

byte_array = message.to_bytes(message.bit_length() // 8 + 1, byteorder= "big")
m = byte_array.decode("utf-8")
print(m)

RSA_Oracle_Checker(m)