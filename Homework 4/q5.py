# -*- coding: utf-8 -*-
"""q5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZOyDFG0rQ5YyNrYiUOawGfgRaVubYbdi
"""

!pip install pycryptodome

from Crypto.Hash import SHA3_256
from Crypto.Hash import SHAKE128

def phi(n):
  amount = 0
  for k in range(1, n+1):
    if math.gcd(n,k) == 1:
      amount += 1
  return amount

def egcd(a,b):
  x,y,u,v = 0,1,1,0
  while a!=0:
    q,r = b//a, b%a
    m,n = x-u*q, y-v*q
    b,a,x,y,u,v = a,r,u,v,m,n
  gcd = b
  return gcd, x,y 

def modinv(a, m):
    a = a % m
    if (a < -m):
        a = a+m
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m

q = 21050461915163064005698472752818467960484664222419461240422905587329
p = 16635001268424770248362496020878982794855973042727123110276218221363115248532121656926998495324422884201900546908247299422529867020257795305915603399119784123817977551475938749843630747090805551303187823118917870107061292013527768094302098323705503978319951833567419037832636219099472142540390679316084341253020797072674386750831658161591413643898670788050409197352632518762512104827405576470131295832318199648795861715154786017505168792207090684639374274256123402219808087541722302681946268933484824286411774800000044873249941828965744594817357937388103636107551213520018336143107199947863581191230243194303971728193
g = 409316209796607490968734702020982808779338767387886312652237001531251351938414278090418335087913649957799748693058456436137378789213031021601841984495312049017317816796121062649530217902210296634640163356870134181395034601787974591435423590515009773320665843668567792787586385542473707813385608228801244487451564165725038895882068989096564645832341913994604332904195872831552155924295687686237830596535191981309628250139994665077358186000006346169433722976057429006410973538262567497727108655658411548500539156450645011181472707759988651178689172865670421964261741363964440921727292947646859466643167910307728438276
beta = 3330001424503044325932197676136127266689391995091913015672597381088363195443636436214100590508995319643488427125424686523948044137259202338907646703934598548017408323184017924886648962864744316964924113022186198950356963907891485247777163647671390447197859117383473236224866812457281418747109659529110082818277631210752087862841216075741167889905488089669423185704020852396281310433750953573745705629323883712097669867644208372177477427478678910590717109433071441763118202206656013354491876405578183340130479272394166426285634289785202101955376163382958091547009006419080716225036628147308639272669903679362104917651

s1 = 15045429964567421250403275656320025283600046882519690784113588548158
s2 = 14016151436550334193141059702675072658308100333231844563375725796770
r = 260444855760506318805841590364189311211267498403457607938240440795

message1_byte = b"Asking questions during the lectures helps you understand Crypto"
message2_byte = b"Keep your friends close, but your enemies closer"

shake1 = SHAKE128.new(message1_byte)
h1 = int.from_bytes(shake1.read(q.bit_length()//8), byteorder='big')

shake2 = SHAKE128.new(message2_byte)
h2 = int.from_bytes(shake2.read(q.bit_length()//8), byteorder='big')

private_key = ((s2*h1 - s1*h2) * modinv(r * (s1 - s2), q)) % q
print("Private Key:", private_key)

