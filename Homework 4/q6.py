# -*- coding: utf-8 -*-
"""q6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oTF5qLxmKkRhKSXeFomdV1rO-FLHjjun
"""

!pip install pycryptodome

from Crypto.Hash import SHA3_256
from Crypto.Hash import SHAKE128

def phi(n):
  amount = 0
  for k in range(1, n+1):
    if math.gcd(n,k) == 1:
      amount += 1
  return amount

def egcd(a,b):
  x,y,u,v = 0,1,1,0
  while a!=0:
    q,r = b//a, b%a
    m,n = x-u*q, y-v*q
    b,a,x,y,u,v = a,r,u,v,m,n
  gcd = b
  return gcd, x,y 

def modinv(a, m):
    a = a % m
    if (a < -m):
        a = a+m
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m

q = 1274928665248456750459255476142268320222010991943
p = 94399082877738640356344835093633851742226810946548058167594106609599304101483376198601628644645578978665867743371516213549559017509270013785262825124888169738692088560919995075509146379802866347021353299579995280712578946802331952341703103059527013530389111994085951544456654086033481582042901134498773988127
g = 74757613048887093209741634228228425902948572222965683892966782829654298800791789084861356704346371244921201938818880899647348974925451953450279300514594642896343751389085838466583384452902564477981127117505259585303938871436241327714244689153971542398500058515599232922200606171788427214873986464441516423273
beta =  9391078822012222264248483853957955450074521847096866533459681369546944886235023857738438187102424298184377435789154539420500484576343932422250732759800837979336463896251863203597988162906413924736488554239908614170057127399588501615428907239954984946982024571938034476806841633488050802767414373595444261997

r1 = 780456265196245442017019073827244628033034896446
r2 = 927294142715241205623350780659879368622965215767
s1 = 214154189471546244965139202160125045302874348377
s2 = 151110642214296558517943730901561426792280910589

message1_byte= b"Erkay hoca wish that you did learn a lot in the Cryptography course"
message2_byte = b"Who will win the 2021 F1 championship, Max or Lewis?"

shake1 = SHAKE128.new(message1_byte)
h1 = int.from_bytes(shake1.read(q.bit_length()//8), byteorder='big')

shake2 = SHAKE128.new(message2_byte)
h2 = int.from_bytes(shake2.read(q.bit_length()//8), byteorder='big')

for i in range(100): # exhaustive search for finding 'i' where session_key_1 = i*session_key_2
  private_key = (s1*h2 - s2*h1*i) * modinv((s2*r1*i)%q - (s1*r2)%q, q) % q # calculating private key for each i
  if beta == pow(g, private_key, p): # checking g^a mod(p) is equal to beta. if this is the case, this means we found the private key
    print("i:", i)
    print("Private Key:", private_key)
    break